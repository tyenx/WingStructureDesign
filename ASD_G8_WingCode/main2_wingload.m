% 20240207 Calculate wing loads
clc
clear
close all

%% Input aircraft design parameters
load Aircraft_Parameter_new.mat;

%% Set design parameters and flight state, tentative values
fly_state.air_density = 0.5489; % Air density, unit: kg/m^3
fly_state.AoA = 0; % Flight angle of attack, unit: degrees
fly_state.speed = aircft_para.other.cruise_speed; % Flight speed, unit: m/s
fly_state.load_factor = 1; % Design load factor, unit: -

des_para.xcg = -(1.176/2.85-0.5); % Distance from center of gravity to shear center (positive if ahead of shear center), unit: (* chord length)
des_para.xac = 0.25; % Distance from aerodynamic center to shear center (positive if ahead of shear center), unit: (* chord length)
des_para.xeg = 1.8/2.85; % Distance from engine installation to shear center (positive if ahead of shear center), unit: (* chord length)
des_para.heg = 0.6/2.85; % Vertical distance from engine installation to shear center (positive if below shear center), unit: (* chord length)
des_para.wing_install_AOA = 2.45; % Wing installation angle of attack, unit: degrees

%%
i = 1;
step = 0.05; % Step for dividing wing elements (spanwise)
factor = 1; % Plotting factor
for X = 0:step:14.25
    % Inertial loads
    [S_i, BM_i, ~] = load_wing_inertia(aircft_para, X);
    Loadi_local = load_wing_local_inertia(aircft_para, X, step);

    % Lift
    [S_l, BM_l, Lift_total] = load_wing_lift(fly_state, aircft_para, des_para, X);
    Lift_local = load_wing_lift_local(fly_state, aircft_para, des_para, X, step);

    % External torque (moment)
    [T, ~] = load_wing_torque(fly_state, aircft_para, des_para, X);
    Moment_local = load_wing_local_torque(fly_state, aircft_para, des_para, X, step);

    % Record data (multiplied by load factor and safety factor)
    data_shear_i(i, :) = [X, S_i * factor]; % Shear force generated by inertial load
    data_bending_i(i, :) = [X, BM_i * factor]; % Bending moment generated by inertial load
    data_shear_l(i, :) = [X, S_l * factor]; % Shear force generated by lift
    data_bending_l(i, :) = [X, BM_l * factor]; % Bending moment generated by lift
    data_shear(i, :) = [X, (S_i + S_l) * factor]; % Shear force
    data_bending(i, :) = [X, (BM_i + BM_l) * factor]; % Bending moment
    data_torque(i, :) = [X, T * factor]; % Torque
    data_loadi_local(i, :) = [X, Loadi_local * factor]; % Local inertial load
    data_lift_local(i, :) = [X, Lift_local * factor]; % Local lift
    data_lift_total(i, :) = [X, Lift_total * factor]; % Total lift (from wingtip to position)
    data_moment_local(i, :) = [X, Moment_local * factor]; % Local external torque
    i = i + 1;
end

% Lift to weight comparison
weight_vs_lift = [aircft_para.weight.MTOW * 9.81, data_lift_total(1, 2) * 2];

%% Wing Inertia Load Plot
f1 = figure;
f1.Position = [100 100 800 550];

subplot(3,1,1)
f1p1 = plot(data_loadi_local(:,1), data_loadi_local(:,2));
f1p1_ax = gca;
f1p1_ax.YAxis.Exponent = 3;
title('\rm (a) Inertia Load Distribution')
ylabel('Load (N)');
ylim([-4.25e3, 250])

subplot(3,1,2)
f1p2 = plot(data_shear_i(:,1), data_shear_i(:,2));
f1p2_ax = gca;
title('\rm (b) Shear Force Distribution')
ylabel('Shear Force (N)');

subplot(3,1,3)
f1p3 = plot(data_bending_i(:,1), data_bending_i(:,2));
f1p3_ax = gca;
title('\rm (c) Bending Moment Distribution')
ylabel('Bending Moment (Nm)')
xlabel('Semi Wingspan Stations (m)');

align_Ylabels(gcf);
set([f1p1, f1p2, f1p3], 'Color', 'k', 'LineWidth', 1.5);
set([f1p1_ax, f1p2_ax, f1p3_ax], 'fontname', 'CMU Serif', 'FontSize', 14, 'LineWidth', 1, 'xlim', [0 14.5]);

% Saving the figures as PDF files
if 0
    exportgraphics(f1,'wing_inertia_load.pdf','ContentType','vector')
    exportgraphics(f2,'wing_aero_load.pdf','ContentType','vector')
    exportgraphics(f3,'wing_torque1.pdf','ContentType','vector')
    exportgraphics(f4,'wing_tot.pdf','ContentType','vector')
end 
